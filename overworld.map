;;;; Hey, Emacs! This is a -*- lisp -*- file!
(in-package #:cataclysm)

(defvar *key-location* nil)
(defvar *portal-location* nil)
(defvar *crown-location* nil)
(defvar *current-dungeon* nil)
(defvar *current-floor* 0)
(defparameter *from* 'above)

(unless *crown-location*
  (setf *random-state* (make-random-state t))
  (let ((crown (random 4))
	(key (random 4))
	(portal (random 4)))
    (when (= key crown)
      (setf key (mod (1+ key) 4)))
    (when (= portal crown)
      (setf portal (mod (1+ portal) 4))
      (when (= portal key)
	(setf portal (mod (1+ portal) 4))))
    (case crown
      (0 (setf *crown-location* 'miniplenty))
      (1 (setf *crown-location* 'minipax))
      (2 (setf *crown-location* 'minitrue))
      (3 (setf *crown-location* 'miniluv)))
    (case key
      (0 (setf *key-location* 'miniplenty))
      (1 (setf *key-location* 'minipax))
      (2 (setf *key-location* 'minitrue))
      (3 (setf *key-location* 'miniluv)))
    (case portal
      (0 (setf *portal-location* 'miniplenty))
      (1 (setf *portal-location* 'minipax))
      (2 (setf *portal-location* 'minitrue))
      (3 (setf *portal-location* 'miniluv)))))

;;; Create overworld
(defparameter *tileset* "images/tiles.png")
(defparameter *map-width* 45)
(defparameter *map-height* 30)
(defparameter *floor-map* (make-array '(45 30) :initial-element 3))
(defparameter *wall-map* (make-array '(45 30) :initial-element -1))
(defparameter *obstacle-map* (make-array '(45 30) :initial-element -1))
(defparameter *object-map* (make-array '(45 30) :initial-element -1))
(defparameter *portals* (make-array '(45 30) :initial-element nil))
(defparameter *messages* (make-array '(45 50) :initial-element nil))

;;; player location
(cond
  ((eq *current-dungeon* 'miniplenty)
   (setf (x-position *player*) 144)
   (setf (y-position *player*) 176))
  ((eq *current-dungeon* 'minipax)
   (setf (x-position *player*) 112)
   (setf (y-position *player*) 848))
  ((eq *current-dungeon* 'minitrue)
   (setf (x-position *player*) 1264)
   (setf (y-position *player*) 208))
  ((eq *current-dungeon* 'miniluv)
   (setf (x-position *player*) 1264)
   (setf (y-position *player*) 848))
  (t
   (setf (x-position *player*) 720)
   (setf (y-position *player*) 400)))
(setf *current-dungeon* nil)

;;; border of trees around overworld
(dotimes (i 45)
  (setf (aref *wall-map* i 0) 26)
  (setf (aref *wall-map* i 29) 26))

(dotimes (i 30)
  (setf (aref *wall-map* 0 i) 26)
  (setf (aref *wall-map* 44 i) 26))

;;; desert
(dotimes (i 15)
  (dotimes (j 10)
    (setf (aref *floor-map* i j) 4)
    (when (or (= i 0) (= j 0))
      (setf (aref *wall-map* i j) 34))))

;;; stones
(setf (aref *wall-map* 2 2) 34)
(setf (aref *wall-map* 8 2) 34)
(setf (aref *wall-map* 12 2) 34)
(setf (aref *wall-map* 10 4) 34)
(setf (aref *wall-map* 2 6) 34)
(setf (aref *wall-map* 9 6) 34)
(setf (aref *wall-map* 12 6) 34)
(setf (aref *wall-map* 4 8) 34)
(setf (aref *wall-map* 1 9) 34)
(setf (aref *wall-map* 8 9) 34)
(setf (aref *wall-map* 14 9) 34)

;;; trees

(setf (aref *wall-map* 33 1) 26)
(setf (aref *wall-map* 34 1) 26)
(setf (aref *wall-map* 23 2) 26)
(setf (aref *wall-map* 34 2) 26)
(setf (aref *wall-map* 26 3) 26)
(setf (aref *wall-map* 32 3) 26)
(setf (aref *wall-map* 18 5) 26)
(setf (aref *wall-map* 22 5) 26)
(setf (aref *wall-map* 26 5) 26)
(setf (aref *wall-map* 32 5) 26)
(setf (aref *wall-map* 33 5) 26)
(setf (aref *wall-map* 32 6) 26)
(setf (aref *wall-map* 33 6) 26)
(setf (aref *wall-map* 22 7) 26)
(setf (aref *wall-map* 28 7) 26)
(setf (aref *wall-map* 34 7) 26)
(setf (aref *wall-map* 19 8) 26)
(setf (aref *wall-map* 34 8) 26)
(setf (aref *wall-map* 34 9) 26)
(setf (aref *wall-map* 32 10) 26)
(setf (aref *wall-map* 17 11) 26)
(setf (aref *wall-map* 32 11) 26)
(setf (aref *wall-map* 33 11) 26)
(setf (aref *wall-map* 26 12) 26)
(setf (aref *wall-map* 35 12) 26)
(setf (aref *wall-map* 36 12) 26)
(setf (aref *wall-map* 38 12) 26)
(setf (aref *wall-map* 40 12) 26)
(setf (aref *wall-map* 42 12) 26)
(setf (aref *wall-map* 43 12) 26)
(setf (aref *wall-map* 32 13) 26)
(setf (aref *wall-map* 36 13) 26)
(setf (aref *wall-map* 40 13) 26)
(setf (aref *wall-map* 10 14) 26)
(setf (aref *wall-map* 17 14) 26)
(setf (aref *wall-map* 29 14) 26)
(setf (aref *wall-map* 32 14) 26)
(setf (aref *wall-map* 33 14) 26)
(setf (aref *wall-map* 39 14) 26)
(setf (aref *wall-map* 40 14) 26)
(setf (aref *wall-map* 41 14) 26)
(setf (aref *wall-map* 42 14) 26)
(setf (aref *wall-map* 35 15) 26)
(setf (aref *wall-map* 42 15) 26)
(setf (aref *wall-map* 24 16) 26)
(setf (aref *wall-map* 28 16) 26)
(setf (aref *wall-map* 35 16) 26)
(setf (aref *wall-map* 38 16) 26)
(setf (aref *wall-map* 39 16) 26)
(setf (aref *wall-map* 40 16) 26)
(setf (aref *wall-map* 7 17) 26)
(setf (aref *wall-map* 32 17) 26)
(setf (aref *wall-map* 32 18) 26)
(setf (aref *wall-map* 35 18) 26)
(setf (aref *wall-map* 36 18) 26)
(setf (aref *wall-map* 37 18) 26)
(setf (aref *wall-map* 38 18) 26)
(setf (aref *wall-map* 32 19) 26)
(setf (aref *wall-map* 38 19) 26)
(setf (aref *wall-map* 42 19) 26)
(setf (aref *wall-map* 22 20) 26)
(setf (aref *wall-map* 29 20) 26)
(setf (aref *wall-map* 36 20) 26)
(setf (aref *wall-map* 38 20) 26)
(setf (aref *wall-map* 41 20) 26)
(setf (aref *wall-map* 42 20) 26)
(setf (aref *wall-map* 12 21) 26)
(setf (aref *wall-map* 32 21) 26)
(setf (aref *wall-map* 33 21) 26)
(setf (aref *wall-map* 36 21) 26)
(setf (aref *wall-map* 27 22) 26)
(setf (aref *wall-map* 32 22) 26)
(setf (aref *wall-map* 33 22) 26)
(setf (aref *wall-map* 36 22) 26)
(setf (aref *wall-map* 37 22) 26)
(setf (aref *wall-map* 41 22) 26)
(setf (aref *wall-map* 24 23) 26)
(setf (aref *wall-map* 29 24) 26)
(setf (aref *wall-map* 33 24) 26)
(setf (aref *wall-map* 34 24) 26)
(setf (aref *wall-map* 35 24) 26)
(setf (aref *wall-map* 36 24) 26)
(setf (aref *wall-map* 41 24) 26)
(setf (aref *wall-map* 42 24) 26)
(setf (aref *wall-map* 22 25) 26)
(setf (aref *wall-map* 33 25) 26)
(setf (aref *wall-map* 42 25) 26)
(setf (aref *wall-map* 27 26) 26)
(setf (aref *wall-map* 33 26) 26)
(setf (aref *wall-map* 35 26) 26)
(setf (aref *wall-map* 36 26) 26)
(setf (aref *wall-map* 37 26) 26)
(setf (aref *wall-map* 41 26) 26)
(setf (aref *wall-map* 42 26) 26)
(setf (aref *wall-map* 35 27) 26)
(setf (aref *wall-map* 36 27) 26)
(setf (aref *wall-map* 37 27) 26)
(setf (aref *wall-map* 35 28) 26)
(setf (aref *wall-map* 36 28) 26)
(setf (aref *wall-map* 37 28) 26)
(setf (aref *wall-map* 38 28) 26)
(setf (aref *wall-map* 39 28) 26)

;;; lake and river
(dotimes (i 9)
  (dotimes (j 11)
    (unless (and (= i 4) (> j 6))
      (setf (aref *wall-map* (+ i 35) (+ j 1)) 21))))
(dotimes (i 7)
  (dotimes (j 5)
    (setf (aref *wall-map* (+ i 36) (+ j 3)) -1)))
(dotimes (i 4)
  (setf (aref *floor-map* 39 (+ i 8)) 14))
(setf (aref *floor-map* 36 3) 5)
(setf (aref *floor-map* 42 3) 6)
(setf (aref *floor-map* 36 7) 8)
(setf (aref *floor-map* 42 7) 7)
(setf (aref *wall-map* 35 1) 23)
(setf (aref *wall-map* 43 1) 24)
(setf (aref *wall-map* 35 11) 22)
(setf (aref *wall-map* 43 11) 25)
(setf (aref *floor-map* 36 12) 6)
(setf (aref *floor-map* 38 12) 5)
(setf (aref *floor-map* 38 16) 8)
(setf (aref *wall-map* 37 12) 21)
(setf (aref *wall-map* 37 13) 21)
(setf (aref *wall-map* 37 14) 21)
(setf (aref *wall-map* 37 15) 21)
(setf (aref *wall-map* 37 16) 21)
(setf (aref *wall-map* 37 17) 22)
(setf (aref *wall-map* 38 17) 21)
(setf (aref *wall-map* 39 17) 21)
(setf (aref *wall-map* 40 17) 21)
(setf (aref *floor-map* 41 17) 14)
(setf (aref *wall-map* 42 17) 21)
(setf (aref *wall-map* 43 17) 21)
(setf (aref *wall-map* 44 17) 21)

;;; friendly character
(setf (aref *obstacle-map* 22 9) 62)
(setf (aref *messages* 22 9)
      "If you can steal the crown from the government offices, the soldiers will become loyal to you.")

;;; ministry of plenty
(setf (aref *wall-map* 4 2) 33)
(setf (aref *wall-map* 3 3) 32)
(setf (aref *wall-map* 4 3) 27)
(setf (aref *wall-map* 5 3) 31)
(setf (aref *wall-map* 2 4) 32)
(setf (aref *wall-map* 3 4) 27)
(setf (aref *floor-map* 4 4) 13)
(setf (aref *portals* 4 4) "ministry.map")
(setf (aref *wall-map* 5 4) 27)
(setf (aref *wall-map* 6 4) 31)
(setf (aref *obstacle-map* 5 5) 61)
(setf (aref *messages* 5 5) "Ministry of Plenty")

;;; ministry of peace
(setf (aref *wall-map* 3 23) 33)
(setf (aref *wall-map* 2 24) 32)
(setf (aref *wall-map* 3 24) 27)
(setf (aref *wall-map* 4 24) 31)
(setf (aref *wall-map* 1 25) 32)
(setf (aref *wall-map* 2 25) 27)
(setf (aref *floor-map* 3 25) 13)
(setf (aref *portals* 3 25) "ministry.map")
(setf (aref *wall-map* 4 25) 27)
(setf (aref *wall-map* 5 25) 31)
(setf (aref *obstacle-map* 4 26) 61)
(setf (aref *messages* 4 26) "Ministry of Peace")

;;; ministry of truth
(setf (aref *wall-map* 39 3) 33)
(setf (aref *wall-map* 38 4) 32)
(setf (aref *wall-map* 39 4) 27)
(setf (aref *wall-map* 40 4) 31)
(setf (aref *wall-map* 37 5) 32)
(setf (aref *wall-map* 38 5) 27)
(setf (aref *floor-map* 39 5) 13)
(setf (aref *portals* 39 5) "ministry.map")
(setf (aref *wall-map* 40 5) 27)
(setf (aref *wall-map* 41 5) 31)
(setf (aref *obstacle-map* 40 6) 61)
(setf (aref *messages* 40 6) "Ministry of Truth")

;;; ministry of love
(setf (aref *wall-map* 39 23) 33)
(setf (aref *wall-map* 38 24) 32)
(setf (aref *wall-map* 39 24) 27)
(setf (aref *wall-map* 40 24) 31)
(setf (aref *wall-map* 37 25) 32)
(setf (aref *wall-map* 38 25) 27)
(setf (aref *floor-map* 39 25) 13)
(setf (aref *portals* 39 25) "ministry.map")
(setf (aref *wall-map* 40 25) 27)
(setf (aref *wall-map* 41 25) 31)
(setf (aref *obstacle-map* 38 26) 61)
(setf (aref *messages* 38 26) "Ministry of Love")

;;; place a bunch of enemies around the map

(setf *current-map* (make-instance 'world-map
				   :map-name 'overworld
				   :tileset *tileset*
				   :map-width *map-width*
				   :map-height *map-height*
				   :floor-map *floor-map*
				   :wall-map *wall-map*
				   :obstacle-map *obstacle-map*
				   :object-map *object-map*
				   :portals *portals*
				   :messages *messages*))
